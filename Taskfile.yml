# github.com/go-task/task

version: '2'

# The prefix output will prefix every line printed by a command with [task-name] as the prefix.
output: prefixed

vars:
  # App name to compile, test, etc.
  APP:
    sh: echo ${APP:-NOT_DEFINED}
  BIN: "{{.APP}}{{exeExt}}"

tasks:
  checkVars:
    cmds:
      - test -d 'cmd/{{.APP}}' || `echo 'Command "{{.APP}}" does not exist! Cannot continue!' && exit 1`
    silent: true

  dependencies:
    desc: Ensure dependencies are installed.
    cmds:
      - dep ensure
    silent: true
    deps:
      - checkVars

  vet:
    desc: |
      Examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with
      the format string. Uses heuristics that do not guarantee all reports are genuine problems, but it can find errors
      not caught by the compilers.
    cmds:
      - go vet ./cmd/{{.APP}}/ ./internal/app/{{.APP}}/ ./internal/pkg/**/ ./pkg/**/
      # - find cmd/{{.APP}}/ pkg/* internal/**/* -type d -execdir go vet {} +
    silent: true
    deps:
      - checkVars
  fmt:
    desc: |
      Gofmt formats Go programs. It uses tabs for indentation and blanks for alignment. Alignment assumes that an editor
      is using a fixed-width font.
    cmds:
      - gofmt -s -w ./cmd/{{.APP}}/ ./internal/app/{{.APP}}/ ./internal/pkg/**/ ./pkg/**/
      # - find cmd/{{.APP}}/ internal/**/* pkg/* -type d -execdir gofmt -s -w {} +
    silent: true
    deps:
      - checkVars
  metalinter:
    desc:
      Concurrently run Go lint tools and normalise their output.  https://github.com/alecthomas/gometalinter
    cmds:
      - gometalinter ./cmd/{{.APP}}/ ./internal/app/{{.APP}}/ ./internal/pkg/**/ ./pkg/**/
    # ignore_error: true
    silent: true
    deps:
      - checkVars
  test:
    desc: Automates testing the packages named by the import paths.
    cmds:
      # - go test -race ./cmd/{{.APP}}/ ./internal/app/{{.APP}}/ ./internal/pkg/**/ ./pkg/**/
      - find ./cmd/{{.APP}}/ ./internal/app/{{.APP}}/ ./internal/pkg/**/ ./pkg/**/ -type d -execdir go test -race {} +
    silent: true
    deps:
      - checkVars

  # generate:
  #   desc: Generate Go files by processing source. Usually not needed?
  #   cmds:
  #     - go generate ./cmd/{{.APP}}/
  #   deps:
  #     - checkVars
  # install:
  #   desc: Compile and install packages and dependencies.
  #   cmds:
  #     - go install ./cmd/{{.APP}}/
  #   deps:
  #     - checkVars
  build:
    cmds:
      - go build -race -v -o {{.BIN}} ./cmd/{{.APP}}/main.go
    deps:
      - checkVars
  run:
    cmds:
      - go run -race ./cmd/{{.APP}}/main.go
    silent: true
    deps:
      - checkVars

  dev:
    desc: Run all pieces needed for devs.
    cmds:
      - echo
      - echo "Starting tests..."
      - echo
      - task: dependencies
      - task: metalinter
      - task: test
      - task: run
    silent: true
    method: none
    # sources:
    #   - '*.go'
    #   - '*.yaml'
    #   - '*.yml'
    #   - '**/*.go'
    #   - '**/*.yaml'
    #   - '**/*.yml'
    #   - '**/**/*.go'
    #   - '**/**/*.yaml'
    #   - '**/**/*.yml'

  default:
    cmds:
      - task: dev
